{"version":3,"sources":["data/index.js","components/NavResults/index.js","components/Header/index.js","components/GameCard/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["characters","name","image","map","ch","idx","module","exports","navMessages","id","msg","NavResult","_ref","messages","msgCode","currScore","maxScore","react_default","a","createElement","Header","props","GameCard","onClick","cardClick","GameBoard","className","character","components_GameCard","key","App","state","guessedIds","navMsgCode","navMsgs","console","log","_this","setState","sort","b","Math","random","currentScore","concat","Object","toConsumableArray","this","NavResults","components_Header","components_GameBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09d58762.chunk.js","sourcesContent":["let characters = [\n  {\n    name: \"Dilbert\",\n    image: \"imageDilbert\"\n  },\n  {\n    name: \"Alice\",\n    image: \"imageAlice\"\n  },\n  {\n    name: \"Dogbert\",\n    image: \"image\"\n  },\n  {\n    name: \"Catbert\",\n    image: \"image\"\n  },\n  {\n    name: \"Ratbert\",\n    image: \"image\"\n  },\n  {\n    name: \"Loud Howard\",\n    image: \"image\"\n  },\n  {\n    name: \"Wally\",\n    image: \"image\"\n  },\n  {\n    name: \"Pointy-Haired Boss\",\n    image: \"image\"\n  },\n  {\n    name: \"Ashok\",\n    image: \"image\"\n  },\n  {\n    name: \"Dilbert's Mother\",\n    image: \"image\"\n  },\n  {\n    name: \"Bob the Dinosaur\",\n    image: \"image\"\n  },\n  {\n    name: \"Mister Garbage Man\",\n    image: \"image\"\n  }\n]\n\n\n// Add Array Index as id Property to each element.\ncharacters = characters.map((ch, idx ) => {\n  ch[\"id\"] = idx;\n  return ch;\n});\n\nconst navMessages = [\n  {\n    id: 0,\n    msg: \"\"\n  },\n  {\n    id: 1,\n    msg: \"You Already Clicked This One!!! Try Again!!\"\n  },\n  {\n    id: 2,\n    msg: \"Excellent!! Hit the Next One!!!\"\n  },\n  {\n    id: 3,\n    msg: \"You Win\"\n  },\n]\n\nmodule.exports = { characters, navMessages }","import React from \"react\";\n\nfunction NavResult({messages, msgCode, currScore, maxScore}) {\n  return (\n    <div>\n      NavResult / {messages[msgCode].msg} / \n      <strong>Current Score:</strong> {currScore} / \n      <strong>Max Score:</strong> {maxScore}\n    </div>\n  );\n}\n\nexport default NavResult;","import React from \"react\";\n\nfunction Header(props) {\n  return (\n    <div>Header</div>\n  );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction GameCard(props) {\n  return (\n    <div onClick={props.cardClick}>\n      GameCard - {props.name} - {props.image}\n    </div>\n  );\n}\n\nexport default GameCard;","import React from \"react\";\nimport GameCard from \"../GameCard\"\n\nfunction GameBoard(props) {\n  return (\n    <div className=\"container\">\n      <div>GameBoard</div>\n      {props.characters.map(character => (\n        <GameCard \n          key={character.id} \n          id={character.id} \n          name={character.name} \n          cardClick={()=>props.cardClick(character.id)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport { characters, navMessages } from './data'\nimport NavResults from \"./components/NavResults\";\nimport Header from \"./components/Header\";\nimport GameBoard from \"./components/GameBoard\";\n\nclass App extends Component {\n\n  // State Notes\n  // navMsg Codes:\n  //  0: None\n  //  1: Incorrect\n  //  2: Correct\n  //  3: Correct and Win\n  state = {\n    characters: characters,\n    guessedIds: [],\n    maxScore: 0,\n    currScore: 0,\n    navMsgCode: 0,\n    navMsgs: navMessages,\n  };\n  \n\n  componentDidMount() {\n    // Shuffle Array of Characters\n    this.setState({\n      characters: this.state.characters.sort((a,b) => 0.5 - Math.random())\n    })\n  }\n\n  cardClick = (id) => {\n    console.log(id);\n    // Shuffle Array of Characters\n    this.setState({\n      characters: this.state.characters.sort((a,b) => 0.5 - Math.random())\n    })\n\n    // Check if image has been clicked before\n    if (!(id in this.state.guessedIds)) {\n      // Set A local current Score\n      const currentScore = this.state.currScore + 1;\n      const maxScore = this.state.maxScore;\n      // If the Image has not been clicked before:\n      // Add the id to the guessed ids.\n      // Set the Motivation Message if score < 12 otherwise set it to win message.\n      // Increment the Current Score by one.\n      this.setState({\n        guessedIds: [...this.state.guessedIds, id],\n        navMsgCode: currentScore < 12 ? 2 : 3,\n        currScore: currentScore,\n        maxScore: currentScore >= maxScore ? currentScore : maxScore\n      });\n    } else {\n      this.setState({\n        guessedIds: [],\n        navMsgCode: 1,\n        currScore: 0\n      });\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>Hello Clicky Game</div>\n        <NavResults\n          messages={this.state.navMsgs}\n          msgCode={this.state.navMsgCode}\n          currScore={this.state.currScore}\n          maxScore={this.state.maxScore}\n        />\n        <Header />\n        <GameBoard \n          characters={this.state.characters} \n          cardClick={this.cardClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}