{"version":3,"sources":["data/index.js","components/NavResults/index.js","components/Header/index.js","components/GameCard/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["characters","name","image","map","ch","idx","module","exports","navMessages","id","msg","NavResult","_ref","messages","msgCode","currScore","maxScore","react_default","a","createElement","className","href","Header","props","GameCard","onClick","cardClick","src","alt","GameBoard","character","components_GameCard","key","App","state","guessedIds","navMsgCode","navMsgs","currentScore","_this","includes","setState","concat","Object","toConsumableArray","sort","b","Math","random","this","NavResults","components_Header","components_GameBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2dee3ade.chunk.js","sourcesContent":["let characters = [\n  {\n    name: \"Dilbert\",\n    image: \"./img/Dilbert-Pin.jpg\"\n  },\n  {\n    name: \"Alice\",\n    image: \"./img/Alice.png\"\n  },\n  {\n    name: \"Dogbert\",\n    image: \"./img/Dogbert1.jpg\"\n  },\n  {\n    name: \"Catbert\",\n    image: \"./img/Catbert3.jpg\"\n  },\n  {\n    name: \"Ratbert\",\n    image: \"./img/Ratbert3.jpg\"\n  },\n  {\n    name: \"Loud Howard\",\n    image: \"./img/Loud_Howard_1.jpg\"\n  },\n  {\n    name: \"Wally\",\n    image: \"./img/Wally.png\"\n  },\n  {\n    name: \"Pointy-Haired Boss\",\n    image: \"./img/Boss.png\"\n  },\n  {\n    name: \"Asok\",\n    image: \"./img/ASOK.jpeg\"\n  },\n  {\n    name: \"Dilbert's Mother\",\n    image: \"./img/Dilmom.jpg\"\n  },\n  {\n    name: \"Bob the Dinosaur\",\n    image: \"./img/BobTheDinosaur.gif\"\n  },\n  {\n    name: \"Mister Garbage Man\",\n    image: \"./img/Garbageman.jpg\"\n  }\n]\n\n\n// Add Array Index as id Property to each element.\ncharacters = characters.map((ch, idx ) => {\n  ch[\"id\"] = idx;\n  return ch;\n});\n\nconst navMessages = [\n  {\n    id: 0,\n    msg: \"Click an image to begin!\"\n  },\n  {\n    id: 1,\n    msg: \"Geeze!!! Try Again!!\"\n  },\n  {\n    id: 2,\n    msg: \"Excellent!! Hit the Next One!!!\"\n  },\n  {\n    id: 3,\n    msg: \"You Win\"\n  },\n]\n\nmodule.exports = { characters, navMessages }","import React from \"react\";\n\nfunction NavResult({messages, msgCode, currScore, maxScore}) {\n  return (\n    <nav className=\"navbar fixed-top navbar-expand-sm navbar-light bg-light\">\n      <div className=\"container\">\n        <a \n          href=\"https://seiji13r.github.io/2018bootcamp15reactclickygame/\"\n          className=\"navbar-brand\"\n        >\n          Clicky Game\n        </a>\n\n        {/* \n        <div className=\"navbar-text text-center mx-auto\">\n          <h5 className=\"d-xs-none d-md-block\">{messages[msgCode].msg}</h5>\n        </div> \n        */}\n\n        <span className=\"navbar-text text-center mx-auto d-none d-sm-block\">{messages[msgCode].msg}</span>\n\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item\">\n            <div className=\"navbar-text mr-1\">\n              <strong>Score:</strong> {currScore}\n            </div>\n          </li>\n          <li className=\"nav-item\">\n            <div className=\"navbar-text\">\n              <strong>Top Score:</strong> {maxScore}\n            </div>\n          </li>\n        </ul>\n\n        <div className=\"navbar-text text-center mx-auto d-block d-sm-none\">\n          <h5>{messages[msgCode].msg}</h5>\n        </div>\n        \n      </div>\n    </nav>\n  );\n}\n\nexport default NavResult;","import React from \"react\";\nimport \"./style.css\"\n\nfunction Header(props) {\n  return (\n    <div className=\"jumbotron instructions\">\n      <h1 className=\"text-center\"> Clicky Game! </h1>\n      <h3 className=\"text-center\"> Click on an image to earn points, but don't click on any more than once!</h3>\n      <h6 className=\"text-right\"> Play it on Mobile ðŸ˜„ </h6>\n    </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport './style.css';\n\nfunction GameCard(props) {\n  return (\n    <div className=\"col-3 col-md-3 col-lg-3 p-1 p-sm-2\">\n      <div \n        className={props.maxScore === 0 || (0 < props.currScore && props.currScore <= 12) ? \"game-card-img-wrapper\" : \"game-card-img-wrapper shake\"} \n        onClick={props.cardClick}\n      >\n        <img src={props.image} alt={props.name}/>\n      </div>\n    </div>\n  );\n}\n\nexport default GameCard;","import React from \"react\";\nimport GameCard from \"../GameCard\";\nimport './style.css';\n\nfunction GameBoard(props) {\n  return (\n    <div className=\"container mb-xs-1 mb-sm-2\">\n\n      <div className=\"row\">\n        {props.characters.map(character => (\n          <GameCard \n            key={character.id} \n            id={character.id} \n            name={character.name}\n            image={character.image}\n            cardClick={()=>props.cardClick(character.id)}\n            maxScore={props.maxScore}\n            currScore={props.currScore}\n          />\n        ))}\n\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport { characters, navMessages } from './data'\nimport NavResults from \"./components/NavResults\";\nimport Header from \"./components/Header\";\nimport GameBoard from \"./components/GameBoard\";\nimport \"./App.css\";\n\nclass App extends Component {\n\n  // State Notes\n  // navMsg Codes:\n  //  0: None\n  //  1: Incorrect\n  //  2: Correct\n  //  3: Correct and Win\n  state = {\n    characters: characters,\n    guessedIds: [],\n    maxScore: 0,\n    currScore: 0,\n    navMsgCode: 0,\n    navMsgs: navMessages,\n  };\n  \n\n  componentDidMount() {\n    // Shuffle Array of Characters using sort.\n    this.setState({\n      characters: this.state.characters.sort((a,b) => 0.5 - Math.random())\n    })\n  }\n\n  cardClick = (id) => {\n\n    // Set A local current Score It will loop every 12 Steps\n    const currentScore = this.state.currScore < 12 ?\n      this.state.currScore + 1 : 1;\n\n    // Check if image has been clicked before\n    if (!(this.state.guessedIds.includes(id))) {\n      \n      const maxScore = this.state.maxScore;\n      // If the Image has not been clicked before:\n      // Add the id to the guessed ids.\n      // Set the Motivation Message if score < 12 otherwise set it to win message.\n      // Increment the Current Score by one.\n      this.setState({\n        guessedIds: currentScore < 12 ? [...this.state.guessedIds, id] : [],\n        navMsgCode: currentScore < 12 ? 2 : 3,\n        currScore: currentScore,\n        maxScore: currentScore >= maxScore ? currentScore : maxScore\n      });\n    } else {\n      // If the Image has been clicked before:\n      // Set all values to initial\n      this.setState({\n        guessedIds: [],\n        navMsgCode: 1,\n        currScore: 0\n      });\n    }\n\n    // Shuffle Array of Characters\n    this.setState({\n      characters: this.state.characters.sort((a,b) => 0.5 - Math.random())\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <NavResults\n          messages={this.state.navMsgs}\n          msgCode={this.state.navMsgCode}\n          currScore={this.state.currScore}\n          maxScore={this.state.maxScore}\n        />\n        <Header />\n        <GameBoard \n          characters={this.state.characters}\n          cardClick={this.cardClick}\n          currScore={this.state.currScore}\n          maxScore={this.state.maxScore}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}